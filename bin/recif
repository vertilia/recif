#!/usr/bin/php
<?php

/**
 * CLI-based script accepting input conditions file on STDIN, a list of command
 * line arguments and providing generated class on STDOUT. Errors output via
 * STDERR.
 */

require file_exists(__DIR__ . '/../../../autoload.php')
    ? (__DIR__ . '/../../../autoload.php')
    : (__DIR__ . '/../vendor/autoload.php');

call_user_func(function() use ($argv){
    // read ruleset file from STDIN
    $input_stream = file_get_contents('php://stdin');
    
    // check file is not empty
    if (empty(trim($input_stream))) {
        die(sprintf(
<<<EOU
Usage: %s [options] <ruleset.json >Ruleset.php
Options:
  -n  NAMESPACE use namespace (default: not set)
  -s  generate static method (default: not set)
  -c  CLASS use class name (default: Ruleset)
  -e  CLASS extends class (default: not set)
  -i  INTERFACE implements interfaces, comma separated list (default: not set)
  -x  TYPE define context parameter type (default: not set)
  -r  TYPE define method return type (default: not set)
  -S  VALUE return on success default value (default: true)
  -F  VALUE return on fail default value (default: false)
  -d  declare static_types (default: not set)
  -5  generate php5-compatible code
  -y  input stream in YAML format (needs yaml PECL extension)

See README.md for ruleset file format

EOU
        , basename($argv[0])));
    }

    // set generator options
    $opt = getopt('n:sc:e:i:t:r:S:F:d5y');
    $options = [];
    if (isset($opt['n'])) {
        $options['namespace'] = $opt['n'];
    }
    if (isset($opt['c'])) {
        $options['className'] = $opt['c'];
    }
    if (isset($opt['e'])) {
        $options['extends'] = $opt['e'];
    }
    if (isset($opt['i'])) {
        $options['implements'] = $opt['i'];
    }
    if (isset($opt['t'])) {
        $options['contextType'] = $opt['t'];
    }
    if (isset($opt['r'])) {
        $options['returnType'] = $opt['r'];
    }
    if (isset($opt['S'])) {
        $options['returnOnSuccess'] = $opt['S'];
    }
    if (isset($opt['F'])) {
        $options['returnOnFail'] = $opt['F'];
    }
    if (isset($opt['d'])) {
        $options['declareStrictTypes'] = true;
    }
    if (isset($opt['5'])) {
        $options['php5'] = true;
    }
    $yaml = isset($opt['y']);

    // convert ruleset from input stream to native array
    if ($yaml) {
        if (function_exists('yaml_parse')) {
            $input_array = yaml_parse($input_stream);
            if ($input_array === false) {
                die("Error processing input stream\n");
            }
        } else {
            die(
<<<EOM
Needs yaml PECL extension (not installed) to process yaml input.
https://pecl.php.net/package/yaml

EOM
            );
        }
    } else {
        $input_array = json_decode($input_stream, true);
        if (!isset($input_array)) {
            die(sprintf("Error processing input stream: %s\n", json_last_error_msg()));
        }
    }

    // instantiate generator and produce code from input ruleset
    echo (new Recif\Platform\Php\RulesetGenerator($input_array, $options))->generate();
});
